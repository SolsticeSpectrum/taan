export component ProgressBar inherits Rectangle {
    in-out property <float> progress: 0.0; // 0.0 to 1.0
    in-out property <string> current-time: "0:00";
    in-out property <string> remaining-time: "-0:00";
    callback seek(float); // Emitted when user seeks to a position
    
    height: 20px;
    HorizontalLayout {
        alignment: center;
        spacing: 8px;
        current-time-text := Text {
            text: root.current-time;
            color: #9ca3af;
            font-size: 12px;
            horizontal-alignment: left;
            min-width: 32px;
            max-width: 32px;
        }
        
        // Progress bar container
        progress-container := Rectangle {
            horizontal-stretch: 1;
            height: 16px;
            
            // Progress bar background
            progress-bar := Rectangle {
                width: parent.width;
                height: 4px;
                y: (parent.height - self.height) / 2;
                background: #4b5563;
                border-radius: 2px;
                
                // Progress fill
                progress-fill := Rectangle {
                    width: parent.width * root.progress;
                    height: parent.height;
                    background: white;
                    border-radius: 2px;
                }
                
                // Progress handle
                progress-handle := Rectangle {
                    width: 12px;
                    height: 12px;
                    background: white;
                    border-radius: 6px;
                    x: (parent.width * root.progress) - (self.width / 2);
                    y: (parent.height - self.height) / 2;
                }
                
                // TouchArea for seeking - covers the entire progress area
                progress-touch := TouchArea {
                    width: parent.width;
                    height: 16px; // Cover full container height
                    
                    clicked => {
                        let new-progress = max(0, min(1, self.mouse-x / self.width));
                        root.progress = new-progress;
                        root.seek(new-progress);
                    }
                    moved => {
                        if (self.pressed) {
                            let new-progress = max(0, min(1, self.mouse-x / self.width));
                            root.progress = new-progress;
                            root.seek(new-progress);
                        }
                    }
                }
            }
        }

        remaining-time-text := Text {
            text: root.remaining-time;
            color: #9ca3af;
            font-size: 12px;
            horizontal-alignment: right;
            min-width: 32px;
            max-width: 32px;
        }
    }
}
