// Spotify API interface
// This global provides callbacks for all Spotify operations that the Rust backend will implement

export global SpotifyAPI {
    // === AUTHENTICATION ===
    
    // OAuth login flow
    pure callback start-oauth-login() -> bool;
    pure callback complete-oauth-login(string /* auth-code */) -> bool;
    pure callback refresh-access-token() -> bool;
    pure callback logout() -> bool;
    
    // === USER PROFILE ===
    
    pure callback get-current-user() -> bool;
    pure callback get-user-profile(string /* user-id */) -> bool;
    pure callback get-user-playlists(string /* user-id */, int /* limit */, int /* offset */) -> bool;
    
    // === PLAYBACK CONTROL ===
    
    // Device management
    pure callback get-available-devices() -> bool;
    pure callback transfer-playback(string /* device-id */, bool /* play */) -> bool;
    
    // Playback control
    pure callback start-playback(string /* context-uri */, int /* offset */) -> bool;
    pure callback pause-playback() -> bool;
    pure callback resume-playback() -> bool;
    pure callback skip-to-next() -> bool;
    pure callback skip-to-previous() -> bool;
    pure callback seek-to-position-api(int /* position-ms */) -> bool;
    pure callback set-volume-api(int /* volume-percent */) -> bool;
    pure callback toggle-shuffle-api(bool /* state */) -> bool;
    pure callback set-repeat-mode-api(string /* mode */) -> bool;
    
    // === TRACK AND ALBUM OPERATIONS ===
    
    pure callback get-track(string /* track-id */) -> bool;
    pure callback get-multiple-tracks(string /* track-ids-comma-separated */) -> bool;
    pure callback get-album(string /* album-id */) -> bool;
    pure callback get-album-tracks(string /* album-id */, int /* limit */, int /* offset */) -> bool;
    pure callback get-artist(string /* artist-id */) -> bool;
    pure callback get-artist-albums(string /* artist-id */, string /* album-type */) -> bool;
    pure callback get-artist-top-tracks(string /* artist-id */, string /* country */) -> bool;
    
    // === PLAYLIST OPERATIONS ===
    
    pure callback get-playlist(string /* playlist-id */) -> bool;
    pure callback get-playlist-tracks(string /* playlist-id */, int /* limit */, int /* offset */) -> bool;
    pure callback create-playlist(string /* name */, string /* description */, bool /* public */) -> bool;
    pure callback add-tracks-to-playlist(string /* playlist-id */, string /* track-uris-comma-separated */) -> bool;
    pure callback remove-tracks-from-playlist(string /* playlist-id */, string /* track-uris-comma-separated */) -> bool;
    pure callback follow-playlist(string /* playlist-id */) -> bool;
    pure callback unfollow-playlist(string /* playlist-id */) -> bool;
    
    // === LIBRARY OPERATIONS ===
    
    pure callback get-saved-tracks(int /* limit */, int /* offset */) -> bool;
    pure callback save-tracks(string /* track-ids-comma-separated */) -> bool;
    pure callback remove-saved-tracks(string /* track-ids-comma-separated */) -> bool;
    pure callback check-saved-tracks(string /* track-ids-comma-separated */) -> bool;
    pure callback get-saved-albums(int /* limit */, int /* offset */) -> bool;
    pure callback save-albums(string /* album-ids-comma-separated */) -> bool;
    pure callback remove-saved-albums(string /* album-ids-comma-separated */) -> bool;
    pure callback check-saved-albums(string /* album-ids-comma-separated */) -> bool;
    pure callback get-followed-artists(int /* limit */) -> bool;
    pure callback follow-artists(string /* artist-ids-comma-separated */) -> bool;
    pure callback unfollow-artists(string /* artist-ids-comma-separated */) -> bool;
    pure callback check-followed-artists(string /* artist-ids-comma-separated */) -> bool;
    
    // === SEARCH ===
    
    pure callback search(string, /* query */
        string, /* type: "album,artist,playlist,track" */
        int,    /* limit */
        int     /* offset */
    ) -> bool;
    pure callback search-tracks(string /* query */, int /* limit */) -> bool;
    pure callback search-artists(string /* query */, int /* limit */) -> bool;
    pure callback search-albums(string /* query */, int /* limit */) -> bool;
    pure callback search-playlists(string /* query */, int /* limit */) -> bool;
    
    // === RECOMMENDATIONS ===
    
    pure callback get-recommendations(string, /* seed-artists */
        string, /* seed-genres */
        string, /* seed-tracks */
        int     /* limit */
    ) -> bool;
    pure callback get-available-genre-seeds() -> bool;
    pure callback get-featured-playlists(int /* limit */, int /* offset */) -> bool;
    pure callback get-new-releases(int /* limit */, int /* offset */) -> bool;
    
    // === PLAYER STATE QUERIES ===
    
    pure callback get-current-playback() -> bool;
    pure callback get-recently-played(int /* limit */) -> bool;
    pure callback get-current-track() -> bool;
    
    // === QUEUE MANAGEMENT ===
    
    pure callback add-to-queue-api(string /* track-uri */) -> bool;
    pure callback get-queue() -> bool;
    
    // === ERROR HANDLING AND STATUS ===
    
    in-out property <string> last-api-error: "";
    in-out property <int> api-error-code: 0;
    in-out property <bool> api-rate-limited: false;
    in-out property <int> rate-limit-retry-after: 0;
    in-out property <bool> api-request-in-progress: false;
    pure callback clear-api-error() -> bool;
    pure callback retry-last-request() -> bool;
    
    // === CONNECTION STATUS ===
    
    in-out property <bool> is-connected: false;
    in-out property <bool> is-premium-required: false;
    in-out property <string> connection-status: "disconnected"; // "disconnected", "connecting", "connected", "error"
    
    pure callback check-connection() -> bool;
    pure callback reconnect() -> bool;
}
