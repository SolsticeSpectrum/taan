name: Build Binaries

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-native:
    name: Build ${{ matrix.name }}
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: macOS x86_64
            runner: macos-latest
            target: x86_64-apple-darwin
            artifact: taan-macos-x86_64
            binary: taan
          - name: macOS ARM64
            runner: macos-latest
            target: aarch64-apple-darwin
            artifact: taan-macos-arm64
            binary: taan
          - name: Windows x86_64
            runner: windows-latest
            target: x86_64-pc-windows-msvc
            artifact: taan-windows-x86_64
            binary: taan.exe
          - name: Windows ARM64
            runner: windows-11-arm
            target: aarch64-pc-windows-msvc
            artifact: taan-windows-arm64
            binary: taan.exe
          # glibc builds for Ubuntu, Debian, Fedora, etc.
          - name: Linux x86_64 (glibc)
            runner: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact: taan-linux-x86_64-glibc
            binary: taan
          - name: Linux ARM64 (glibc)
            runner: ubuntu-24.04-arm
            target: aarch64-unknown-linux-gnu
            artifact: taan-linux-arm64-glibc
            binary: taan
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.target }}

      - name: Install Ubuntu dependencies
        if: startsWith(matrix.runner, 'ubuntu')
        run: sudo apt-get update && sudo apt-get install -y build-essential libasound2-dev libfreetype-dev libfontconfig-dev

      - name: Build binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact }}
          path: target/${{ matrix.target }}/release/${{ matrix.binary }}

  build-musl:
    # musl builds for Alpine/postmarketOS using Alpine Docker with sccache
    name: Build ${{ matrix.name }}
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: Linux x86_64 (musl)
            runner: ubuntu-latest
            platform: linux/amd64
            target: x86_64-unknown-linux-musl
            artifact: taan-linux-x86_64-musl
          - name: Linux ARM64 (musl)
            runner: ubuntu-24.04-arm
            platform: linux/arm64
            target: aarch64-unknown-linux-musl
            artifact: taan-linux-arm64-musl
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup sccache
        uses: mozilla-actions/sccache-action@v0.0.7

      - name: Setup cache directories
        run: |
          mkdir -p $HOME/.cargo-docker-cache/registry
          mkdir -p $HOME/.cargo-docker-cache/git
          mkdir -p $HOME/.cargo-docker-cache/target-${{ matrix.target }}
          mkdir -p $HOME/.sccache

      - name: Build in Alpine Docker
        run: |
          docker run --rm \
            --platform ${{ matrix.platform }} \
            -v $PWD:/workspace \
            -v $HOME/.cargo-docker-cache/registry:/usr/local/cargo/registry \
            -v $HOME/.cargo-docker-cache/git:/usr/local/cargo/git \
            -v $HOME/.cargo-docker-cache/target-${{ matrix.target }}:/workspace/target \
            -v $HOME/.sccache:/sccache \
            -w /workspace \
            -e SCCACHE_DIR=/sccache \
            -e SCCACHE_GHA_ENABLED=true \
            -e RUSTC_WRAPPER=sccache \
            -e ACTIONS_CACHE_URL \
            -e ACTIONS_RUNTIME_TOKEN \
            rust:alpine \
            sh -c '
              apk add --no-cache build-base alsa-lib-dev freetype-dev fontconfig-dev perl make python3 clang-dev openssl-dev ninja curl git gn linux-headers sccache && \
              export SKIA_NINJA_COMMAND=/usr/bin/ninja && \
              export SKIA_GN_COMMAND=/usr/bin/gn && \
              cargo build --release --target ${{ matrix.target }} && \
              sccache --show-stats && \
              strip target/${{ matrix.target }}/release/taan
            '

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact }}
          path: target/${{ matrix.target }}/release/taan

  release:
    name: Create Release
    needs: [build-native, build-musl]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare release files
        run: |
          mkdir -p release-files
          cd artifacts
          for dir in */; do
            cd "$dir"
            for file in *; do
              cp "$file" "../../release-files/${dir%/}-${file}"
            done
            cd ..
          done
          cd ../release-files
          for file in *; do
            sha256sum "$file" > "${file}.sha256"
          done
          ls -la

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: "build-${{ github.run_number }}"
          name: "Build #${{ github.run_number }}"
          body: |
            Automated build from main branch
            
            ## Downloads
            
            ### Linux (glibc) - Ubuntu, Debian, Fedora, etc.
            - `taan-linux-x86_64-glibc-taan` - x86_64
            - `taan-linux-arm64-glibc-taan` - ARM64
            
            ### Linux (musl) - Alpine, postmarketOS, static linking
            - `taan-linux-x86_64-musl-taan` - x86_64
            - `taan-linux-arm64-musl-taan` - ARM64
            
            ### macOS
            - `taan-macos-x86_64-taan` - Intel Macs
            - `taan-macos-arm64-taan` - Apple Silicon
            
            ### Windows
            - `taan-windows-x86_64-taan.exe` - x86_64
            - `taan-windows-arm64-taan.exe` - ARM64
          generate_release_notes: true
          files: release-files/*
          make_latest: true
          token: ${{ secrets.GITHUB_TOKEN }}
