name: Build Binaries

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-native:
    name: Build ${{ matrix.name }}
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: macOS x86_64
            runner: macos-latest
            target: x86_64-apple-darwin
            artifact: taan-macos-x86_64
            binary: taan
          - name: macOS ARM64
            runner: macos-latest
            target: aarch64-apple-darwin
            artifact: taan-macos-arm64
            binary: taan
          - name: Windows x86_64
            runner: windows-latest
            target: x86_64-pc-windows-msvc
            artifact: taan-windows-x86_64
            binary: taan.exe
          - name: Windows ARM64
            runner: windows-11-arm
            target: aarch64-pc-windows-msvc
            artifact: taan-windows-arm64
            binary: taan.exe
          # glibc builds for Ubuntu, Debian, Fedora, etc.
          - name: Linux x86_64 (glibc)
            runner: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact: taan-linux-x86_64-glibc
            binary: taan
          - name: Linux ARM64 (glibc)
            runner: ubuntu-24.04-arm
            target: aarch64-unknown-linux-gnu
            artifact: taan-linux-arm64-glibc
            binary: taan
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.target }}

      - name: Install Ubuntu dependencies
        if: startsWith(matrix.runner, 'ubuntu')
        run: sudo apt-get update && sudo apt-get install -y build-essential libasound2-dev libfreetype-dev libfontconfig-dev

      - name: Build binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact }}
          path: target/${{ matrix.target }}/release/${{ matrix.binary }}

  build-musl:
    # musl builds for Alpine/postmarketOS (cross-compile using QEMU/Buildx)
    name: Build musl binaries
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64,amd64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          config-inline: |
            [worker.oci]
              max-parallelism = 2

      - name: Create Dockerfile for musl builds
        run: |
          cat > Dockerfile.musl << 'EOF'
          # syntax=docker/dockerfile:1.4
          ARG TARGETPLATFORM
          FROM --platform=$BUILDPLATFORM tonistiigi/xx:latest AS xx
          
          FROM --platform=$BUILDPLATFORM rust:alpine AS builder
          ARG TARGETPLATFORM
          COPY --from=xx / /
          
          RUN apk add --no-cache \
              build-base \
              alsa-lib-dev \
              freetype-dev \
              fontconfig-dev \
              perl \
              make \
              python3 \
              clang \
              clang-dev \
              openssl-dev \
              ninja \
              curl \
              git \
              gn \
              linux-headers \
              lld
          
          RUN xx-apk add --no-cache \
              musl-dev \
              gcc \
              alsa-lib-dev \
              freetype-dev \
              fontconfig-dev \
              openssl-dev
          
          WORKDIR /workspace
          
          # Copy manifests first to leverage caching
          COPY Cargo.toml Cargo.lock ./
          RUN mkdir -p .cargo && test -f .cargo/config.toml && cp .cargo/config.toml .cargo/config.toml || true
          
          ENV RUSTFLAGS="-C target-feature=-crt-static"
          ENV SKIA_NINJA_COMMAND=/usr/bin/ninja
          ENV SKIA_GN_COMMAND=/usr/bin/gn
          
          # Fetch dependencies (cached separately from build)
          RUN --mount=type=cache,target=/usr/local/cargo/registry,id=cargo-registry-${TARGETPLATFORM} \
              --mount=type=cache,target=/usr/local/cargo/git,id=cargo-git-${TARGETPLATFORM} \
              cargo fetch --locked
          
          # Copy source code
          COPY . .
          
          # Build with cache mounts and extract binary from cache
          RUN --mount=type=cache,target=/usr/local/cargo/registry,id=cargo-registry-${TARGETPLATFORM} \
              --mount=type=cache,target=/usr/local/cargo/git,id=cargo-git-${TARGETPLATFORM} \
              --mount=type=cache,target=/workspace/target,id=cargo-target-${TARGETPLATFORM} \
              xx-cargo build --release && \
              xx-verify target/$(xx-cargo --print-target-triple)/release/taan && \
              cp target/$(xx-cargo --print-target-triple)/release/taan /taan && \
              strip /taan
          
          FROM scratch
          COPY --from=builder /taan /taan
          EOF

      - name: Build x86_64 musl
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile.musl
          platforms: linux/amd64
          outputs: type=local,dest=./dist-x86_64
          cache-from: type=gha,scope=musl-x86_64
          cache-to: type=gha,mode=max,scope=musl-x86_64

      - name: Build ARM64 musl
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile.musl
          platforms: linux/arm64
          outputs: type=local,dest=./dist-arm64
          cache-from: type=gha,scope=musl-arm64
          cache-to: type=gha,mode=max,scope=musl-arm64

      - name: Upload x86_64 artifact
        uses: actions/upload-artifact@v4
        with:
          name: taan-linux-x86_64-musl
          path: dist-x86_64/taan

      - name: Upload ARM64 artifact
        uses: actions/upload-artifact@v4
        with:
          name: taan-linux-arm64-musl
          path: dist-arm64/taan

  release:
    name: Create Release
    needs: [build-native, build-musl]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare release files
        run: |
          mkdir -p release-files
          cd artifacts
          for dir in */; do
            cd "$dir"
            for file in *; do
              cp "$file" "../../release-files/${dir%/}-${file}"
            done
            cd ..
          done
          cd ../release-files
          for file in *; do
            sha256sum "$file" > "${file}.sha256"
          done
          ls -la

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: "build-${{ github.run_number }}"
          name: "Build #${{ github.run_number }}"
          body: |
            Automated build from main branch
            
            ## Downloads
            
            ### Linux (glibc) - Ubuntu, Debian, Fedora, etc.
            - `taan-linux-x86_64-glibc-taan` - x86_64
            - `taan-linux-arm64-glibc-taan` - ARM64
            
            ### Linux (musl) - Alpine, postmarketOS, static linking
            - `taan-linux-x86_64-musl-taan` - x86_64
            - `taan-linux-arm64-musl-taan` - ARM64
            
            ### macOS
            - `taan-macos-x86_64-taan` - Intel Macs
            - `taan-macos-arm64-taan` - Apple Silicon
            
            ### Windows
            - `taan-windows-x86_64-taan.exe` - x86_64
            - `taan-windows-arm64-taan.exe` - ARM64
          generate_release_notes: true
          files: release-files/*
          make_latest: true
          token: ${{ secrets.GITHUB_TOKEN }}
